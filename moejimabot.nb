# -*-ruby-*-
#
# Ma E Jima Bot
#

# bot_file_name and BotClassName must be same name
# (BotClassName.downcase == bot_file_name)
require 'rubygems'
require 'optparse'
require 'kconv'
require 'ndk/server'
require 'ndk/bot'
require 'twitter'
require 'open-uri'
require 'rexml/document'

class MoEJimaBot < Nadoka::NDK_Bot
  def bot_initialize
    @twitter = Twit.new
    @outenc = Kconv::UTF8
  end

  def set_tasks
    @tasks = {
      ".*もえじま.*なると.*" => "post('|-`)つ＠'.toutf8);change_mode(@ch, '+o', @prefix.nick)",
      ".*もえじまー.*" => "post('|-`) なんだい')",
      ".*もえじまきたー.*" => "post('|-`) キタヨー')",
      "^(やらないか)|(もえじま.*やらないか)" => "post('アッー！')",
      ".*もえじま.*(ついったー|twitter)\s(.*)" =>  "@twitter.base.update('|-`) ' + $2);post('ついったった。[|-`) ' + $2 + ']')",
      ".*まえじま.*" => "post('|-`) 呼んだ？') if rand(20) == 1",
      ".*前島.*" => "post('|-`) 呼んだ？') if rand(20) == 1",
      ".*もえじま.*バージョン.*" => "post('MoEJima Bot version 0.30 01/01/2010')",
      ".*もえじま.*時間.*" => "post(Time.now.to_s)",
      ".*もえじま.*時刻合わせ.*" => "`ntpdate ntp.nict.jp`;post('|-`) なおした')",
      "^(?=.*やぎ)(?=.*この時間).{6,}$" => "post('|-`) クビか･･･')",
      ".*もえじま.*コマンド" => "@tasks.each do |key, value| post_notice(key) end",
      "^もえじま.*だまれ$" => "set_flag 'silent'",
      "^もえじま.*ほどほどに$" => "set_flag 'medium'",
      "^もえじま.*しゃべれ$" => "set_flag 'loud'",
      "^もえじま.*モード$" => "post @mode",
      ".*ぬるぽ.*" => "post('ガッ')",
      ".*やぎぽ.*" => "post('163cmッ')",
      ".*たきぽ.*" => "post('アッー！')",
      "もえじまは(何でも|なんでも)知ってるな" => "post('|-`) 何でもは知らないわ。知ってることだけ。')",
      ".*わざとだ" => "post('噛みまみた！')",
      ".*(バリバリ|ばりばり).*" => "post('やめて！')",
      "http://www.nicovideo.jp/watch/(.{2,11})" => "check_nicovideo($1)",
      "ぷおー" => "post('|-`) ぷおー')",
      "こぽー" => "post('|-`) こぽー')",
      ".*アステルバーム.*" => "post('|-`) もしかして：アスパルテーム')",
      "もえじま、ブックマーク登録(.*)" => "write_bookmark($1)",
      "もえじま、ブックマーク一覧" => "show_bookmark"
    }
  end

  # 発言があったときイベント
  def on_privmsg(prefix, ch, msg)
    @mode = 'loud' if !@mode
    set_tasks
    @prefix, @ch, @msg = prefix, ch, msg
    #tasks実行
    @tasks.each do |key, value|
      if Regexp.new(key) =~ @msg
        eval(value)
      end
    end
    #対前島汎用兵器
    if /.*hisu.*/ =~ prefix.nick
      if /.*なるとくれ.*/ =~ @msg
         post('|-`)・・・')
         change_mode(@ch, '-o', @prefix.nick)
      end
    end
  end

  #定期イベント
  def on_timer(t)
    daily t
    hourly t
    every_minutes t
  end

  def daily(t)
    if t.hour == 0 && t.min == 0
      post Time.now.strftime("|-`) %m月%d日 %Aになりました")
    end
  end

  def hourly(t)
    if t.min == 0
      if @mode == 'loud' || (@mode == 'medium' && rand(3) == 1)
        @state.channels.each{|ch|
          @ch = ch
          post(get_alerm_string.gsub("{t.hour}", t.hour.to_s))
        }
      end
    end
  end

  def every_minutes(t)
    get_replies
    set_last_id @ids.max
  end

  #誰かがジョインしたとき
  def on_join(prefix, ch)
    if rand(10) == 1
      post("|-`) #{prefix.nick}があらわれた！")
    end
    if prefix.nick.match(/.*hisu.*/) && rand(5) == 1
      post('|-`) 偽物め')
    end
  end

  def get_alerm_string
    array = YAML.load_file('alerm.yml')
    return array[rand(array.size)]
  end

  def on_quit_from_channel(ch, nick, qmsg)
  end

  def get_replies
    @ids = []
    @twitter.base.mentions.each do |reply|
      post_replies reply
      @ids << reply.id
    end
  end

  def post_replies(reply)
    if reply.id.to_i > get_last_id
      post_notice(reply.text + "   from @" + reply.user.screen_name)
    end
  end

  def get_last_id
    open('last_update.txt', 'r') do |f|
      return f.gets.to_i
    end
  end

  def set_last_id(id)
    open('last_update.txt', 'w+') do |f|
      f.write id
    end
  end

  def post(msg)
    send_privmsg(@ch,msg.kconv(@outenc))
    sleep 1
  end

  def post_notice(msg)
    send_notice(@ch, msg.kconv(@outenc))
    sleep 1
  end

  def set_flag(mode)
    @mode = mode
  end

  def check_nicovideo(number)
    doc = ''
    open('http://ext.nicovideo.jp/api/getthumbinfo/' + number) do |f|
        doc = REXML::Document.new f.read
    end

    post_notice doc.elements['/nicovideo_thumb_response/thumb/title'].text
  end

  def write_bookmark(str)
    open("bookmark.txt", "a") do |f|
      f.write(str)
      f.write("\n")
    end
  end

  def show_bookmark
    open("bookmark.txt", "r") do |f|
      enumerator = f.lines
      enumerator.each do |line|
        post_notice(line)
      end
    end
  end

  class Twit
    attr_accessor :base
    def initialize
      create_httpauth
      create_twitter_base
    end
    def create_httpauth
      yml = YAML.load_file("twitter_config.yml")
      @httpauth = Twitter::HTTPAuth.new(yml["id"], yml["password"]) 
    end
    def create_twitter_base
      @base = Twitter::Base.new(@httpauth)
    end
  end
end
